name: Build and Deploy CYSL Backend

on:
  push:
    paths:
      - 'src/**'
      - '.github/workflows/build-deploy.yml'
      - 'Dockerfile'
      - '.dockerignore'
    branches:
      - '**'
      - '!releases/**'
env:
  DB_NAME: testdb
  DB_USERNAME: root
  DB_PASSWORD: testrootpass

jobs:    
  build_deploy:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          # The MySQL docker container requires these environment variables to be set
          # so we can create and migrate the test database.
          # See: https://hub.docker.com/_/mysql
          MYSQL_DATABASE: ${{ env.DB_NAME }}
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASSWORD }}
        ports:
          # Opens port 3306 on service container and host
          # https://docs.github.com/en/actions/using-containerized-services/about-service-containers
          - 3306:3306
          # Before continuing, verify the mysql container is reachable from the ubuntu host
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    defaults:
      run:
        working-directory: src
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5.1.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt

    - name: Setup Environment
      run: |
        cp ci.env .env
        export DATABASE_URL="mysql+asyncmy://${{ env.DB_USERNAME }}:${{ env.DB_PASSWORD }}@localhost:3306/${{ env.DB_NAME }}"
        alembic upgrade head
        ./tests/load_db.sh -u ${{ env.DB_USERNAME }} -p ${{ env.DB_PASSWORD }} -d ${{ env.DB_NAME }}

    - name: Test with pytest
      run: |
        export DATABASE_URL="mysql+asyncmy://${{ env.DB_USERNAME }}:${{ env.DB_PASSWORD }}@localhost:3306/${{ env.DB_NAME }}"
        coverage run -m pytest || true
        coverage xml -o coverage.xml
        sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' coverage.xml
        cat coverage.xml

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v3.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Deploy to Server
      if: github.ref == 'refs/heads/main'
      uses: easingthemes/ssh-deploy@main
      env:
        TARGET_DIR: ${{ vars.DEPLOY_TARGET }}/backend-files/${{ github.sha }} 
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ARGS: "-rlgoDzvc -i"
        SOURCE: "src/"
        EXCLUDE: "tests/, __pycache__"
        REMOTE_HOST: ${{ vars.DEPLOY_HOST }}
        REMOTE_USER: ${{ vars.DEPLOY_USER }}
        TARGET: ${{env.TARGET_DIR }}
        SCRIPT_BEFORE: |
          sudo mkdir -p ${{ env.TARGET_DIR }}
          sudo chmod 777 -R ${{ env.TARGET_DIR }}
        SCRIPT_AFTER: |
          sudo ./update_cysl_backend.sh ${{ github.sha }}

#  docker_build_push:
#  if: github.ref == 'refs/heads/main'
#    needs: [build_deploy]
#    runs-on: ubuntu-latest
#    permissions:
#      packages: write
#      contents: read
#    env:
#      IMAGE_NAME: cysl-api
#
#    steps:
#    - uses: actions/checkout@v4.2.2
#
#    - name: Build image
#      run: |
#        docker build . --tag ${{ env.IMAGE_NAME}} --label "runnumber=${GITHUB_RUN_ID}"
#
#    - name: Log in to registry
#      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
#
#    - name: Push image
#      run: |
#        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
#        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
#
#        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
#
#        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
#
#        [ "$VERSION" == "main" ] && VERSION=latest
#        echo IMAGE_ID=$IMAGE_ID
#        echo VERSION=$VERSION
#        docker tag ${{ env.IMAGE_NAME }} $IMAGE_ID:$VERSION
#        docker push $IMAGE_ID:$VERSION
