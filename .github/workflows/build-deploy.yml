name: Build and Deploy CYSL Backend

on:
  push:
    paths:
      - '**'
      - '!README.md'
      - '!VERSION'
    branches:
      - '**'
      - '!releases/**'

defaults:
  run:
    working-directory: src

jobs:    
  build_deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.12']

    steps:
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5.1.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt

    - name: Test with pytest
      run: |
        coverage run -m pytest --junitxml=coverage.xml || true
        coverage xml

    - name: Generate reports and fix code coverage paths for Sonarcloud
      run: |
        coverage xml -o coverage.xml
        sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' coverage.xml

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Deploy to Server
      if: github.ref == 'refs/heads/main'
      uses: easingthemes/ssh-deploy@main
      env:
        TARGET_DIR: ${{ vars.DEPLOY_TARGET }}/backend-files/${{ github.sha }} 
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ARGS: "-rlgoDzvc -i"
        SOURCE: "src/"
        EXCLUDE: "tests/, __pycache__"
        REMOTE_HOST: ${{ vars.DEPLOY_HOST }}
        REMOTE_USER: ${{ vars.DEPLOY_USER }}
        TARGET: ${{env.TARGET_DIR }}
        SCRIPT_BEFORE: |
          sudo mkdir -p ${{ env.TARGET_DIR }}
          sudo chmod 777 -R ${{ env.TARGET_DIR }}
        SCRIPT_AFTER: |
          ls -l
          sudo ./update_cysl_backend.sh ${{ github.sha }}

  docker_build_push:
#  if: github.ref == 'refs/heads/main'

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.2.2

    - name: Pull, build and publish Docker image
      uses: VaultVulp/gp-docker-action@1.6.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        image-name: cysl-api
        additional-image-tags: ${{ github.sha }}
